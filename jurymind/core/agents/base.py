"""
Classes to handle creation of agents with multiple pre defined agents already available to use.
"""

from pydantic_ai import Agent
from jurymind.core.models import OptimizationStepResult


class BaseAgent:
    def __init__(self, instructions, agent: Agent, model="openai:gpt-4.1-mini"):
        self.instructions: str = instructions
        self.__agent: Agent = agent

    def run():
        pass


class ClassificationAgent(BaseAgent):
    def __init__(self, instructions, agent, model="openai:gpt-4.1-mini"):
        super().__init__(instructions, agent, model)


class GenerationAgent(BaseAgent):
    def __init__(self, instructions, agent, model="openai:gpt-4.1-mini"):
        super().__init__(instructions, agent, model)


class EvaluationAgent(BaseAgent):

    def __init__(self, instructions, agent, model="openai:gpt-4.1-mini"):
        super().__init__(instructions, agent, model)


class ModificationAgent(BaseAgent):
    """
    Agent whose specific goal is to modify some data into another piece of data.
    It is meant to be generic enough to modify any data generated by other Agents.
    """

    def __init__(self, instructions, data, model="Openai:gpt-4.1-mini"):
        self.super().__init__(
            instructions, Agent(model, output_type=OptimizationStepResult, retries=3)
        )
        self.data = data
